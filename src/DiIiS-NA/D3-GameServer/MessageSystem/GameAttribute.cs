using DiIiS_NA.GameServer.GSSystem.ObjectsSystem;
using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;

namespace DiIiS_NA.GameServer.MessageSystem
{
	public class GameAttributeDependency
	{
		public GameAttribute Attribute;
		public int? Key;
		public bool UsesExplicitKey;
		public bool IsManualDependency;

		public GameAttributeDependency(GameAttribute attribute, int? key, bool usesExplicitKey,
			bool isManualDependency)
		{
			Attribute = attribute;
			Key = key;
			UsesExplicitKey = usesExplicitKey;
			IsManualDependency = isManualDependency;
		}
	}

	public enum GameAttributeEncoding
	{
		Null,
		Int,
		IntMinMax,
		//FloatMinMax,
		Float16,
		Float16Or32,
		Float32,
	}


	/// <summary>
	/// Flags for attribute replication.
	/// </summary>
	[Flags]
	public enum ReplicationFlags : byte
	{
		PlayerReplicated = 0x1,
		LivingReplicated = 0x2,
		GizmoReplicated = 0x4,
		ItemReplicated = 0x8,
		PlayerReplicated2 = 0x80
	}


    // TODO: think about generic class here
	[StructLayout(LayoutKind.Explicit)]
	public struct GameAttributeValue
	{
		[FieldOffset(0)]
		public int Value;
		[FieldOffset(0)]
		public float ValueF;

		public GameAttributeValue(int value) { ValueF = 0f; Value = value; }
		public GameAttributeValue(float value) { Value = 0; ValueF = value; }
	}

	public abstract class GameAttribute
	{
        public const float Float16Min = -65536.0f;
        public const float Float16Max = 65536.0f;

        public int Id { get; }
        public abstract GameAttributeValue DefaultAttributeValue { get; }
        public int U3 { get; }
        public int U4 { get; }
        public int U5 { get; }

        public string Script { get; }
        public string Name { get; }

        public GameAttributeEncoding EncodingType { get; }

        public ReplicationFlags Flags { get; }

        public abstract GameAttributeValue MinAttributeValue { get; }
        public abstract GameAttributeValue MaxAttributeValue { get; }
        public int BitCount { get; }

        public bool IsInteger { get { return EncodingType == GameAttributeEncoding.Int || EncodingType == GameAttributeEncoding.IntMinMax; } }

        // script stuff generated by ScritpedAttributeInitializer and used by GameAttributeMap
        public Func<GameAttributeMap, int?, GameAttributeValue> ScriptFunc = null;
        public List<GameAttributeDependency> Dependents = null;
        public bool ScriptedAndSettable = false;

		protected GameAttribute(int id, string name, GameAttributeEncoding encodingType, int u3 = -1, int u4 = 0, int u5 = 0, string script = "", ReplicationFlags flags = 0, int bitCount = 32)
		{
			Id = id;
            U3 = u3;
            U4 = u4;
            U5 = u5;
			Script = (!string.IsNullOrEmpty(script) && script != "0") ? script : null;
            Name = name;
            EncodingType = encodingType;
            Flags = flags;
            BitCount = bitCount;
        }

        public override string ToString()
        {
            return Name;
        }
    }

    public abstract class GameAttributeTyped<T> : GameAttribute
    {

        public T Default { get; set; }
        public T Min { get; }
        public T Max { get; }

        protected GameAttributeTyped(int id, string name, GameAttributeEncoding encodingType, T defaultValue, T min, T max, int u3 = -1, int u4 = 0, int u5 = 0, string script = "", ReplicationFlags flags = 0, int bitCount = 32)
			: base(id, name, encodingType, u3, u4, u5, script, flags, bitCount)
        {
			Default = defaultValue;
			Min = min;
			Max = max;
        }
    }

    public class GameAttributeI : GameAttributeTyped<int>
    {
        public override GameAttributeValue DefaultAttributeValue => new(Default);
        public override GameAttributeValue MinAttributeValue => new(Min);
		public override GameAttributeValue MaxAttributeValue => new(Max);

        public GameAttributeI(int id, string name, GameAttributeEncoding encodingType = GameAttributeEncoding.Int, int defaultValue = 0, int min = 0, int max = 0, int u3 = -1, int u4 = 0, int u5 = 0, string script = "", ReplicationFlags flags = 0, int bitCount = 32)
			: base(id, name, encodingType, defaultValue, min, max, u3, u4, u5, script, flags, bitCount) { 
		}
    }

    public class GameAttributeF : GameAttributeTyped<float>
    {
        public override GameAttributeValue DefaultAttributeValue => new(Default);
        public override GameAttributeValue MinAttributeValue => new(Min);
        public override GameAttributeValue MaxAttributeValue => new(Max);

        public GameAttributeF(int id, string name, GameAttributeEncoding encodingType = GameAttributeEncoding.Float32, float defaultValue = 0, float min = 0, float max = 0, int u3 = -1, int u4 = 0, int u5 = 0, string script = "", ReplicationFlags flags = 0, int bitCount = 32)
            : base(id, name, encodingType, defaultValue, min, max, u3, u4, u5, script, flags, bitCount)
        {
        }
    }
    public class GameAttributeB : GameAttributeTyped<bool>
    {
        public override GameAttributeValue DefaultAttributeValue => new(Default ? 1 : 0);
        public override GameAttributeValue MinAttributeValue => new(Min ? 1 : 0);
        public override GameAttributeValue MaxAttributeValue => new(Max ? 1 : 0);

        public GameAttributeB(int id, string name, GameAttributeEncoding encodingType = GameAttributeEncoding.IntMinMax, bool defaultValue = false, int u3 = -1, int u4 = 0, int u5 = 0, string script = "", ReplicationFlags flags = 0, int bitCount = 1)
            : base(id, name, encodingType, defaultValue, false, true, u3, u4, u5, script, flags, bitCount)
        {
        }
    }
}
